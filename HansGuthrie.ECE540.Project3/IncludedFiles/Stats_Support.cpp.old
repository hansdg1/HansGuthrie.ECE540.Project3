#include "Stats_Support.h"
#include "Matrix.hpp"

// Regression analysis using two-pass Approach, return coefficient in vector p.
//   y(i) = p(0) * x(i) + p(1) ...
matrix FaultTolerantRegression(matrix x, matrix y)
{
	int k;
	double x_bar = 0, y_bar = 0,
		   Numerator = 0, Denominator = 0;
	// Test that the two vectors are the same length.
	if (x.high() != y.high())
	{
		matrix z;
		return z;
	} // End of invalid input test.

	matrix z(2); // Create output matrix.

	// Loop through to compute mean of x and y.
	for (k = 0; k < x.high(); k++)
	{
		 x_bar += x(k);
		 y_bar += y(k);
	} // End of loop to compute means.

	// Scale sums to be means.
	x_bar /= (double)x.high();
	y_bar /= (double)x.high();

	// Loop computing next step in computing a 
	for (k = 0; k < x.high(); k++)
	{
		 Numerator += (x(k)-x_bar)*(y(k)-y_bar);
         Denominator += (x(k)-x_bar)*(x(k)-x_bar);
	} // End of loop to compute a
	
	// Compute offset, 
	z(0) = Numerator / Denominator;
	z(1) = y_bar - z(0) * x_bar;
	
	return z;

} // End of FaultTolerantRegression

// This function will compute the value of the linear equation defined
// by parms for each value in the array x, placing the result in z.   
matrix ComputeLinear( matrix x, matrix p )
{
	matrix z;

	if (x.isValid() && p.high() >= 2 )
	{
		// Create matrix for output.
		z = matrix(x.high());

		// loop through vector x.
		for (int k = 0; k < x.high(); k++)
		{
			z(k) = p(0) * x(k) + p(1);

		} // end of loop 

	} // end of valid input check.

	return z;

} // End of ComputeLinear

// support for CorrelationCoefficient
double SumOfArraysMinusMeansMultiplied( double *x, double *y, int length, 
                                        double xMean, double yMean )
{
    double sum = (*x-xMean) * (*y-yMean);
    while( --length )
    {
        x++; y++;
        sum += (*x-xMean) * (*y-yMean);
    } // end of while loop.
    return sum;
}// end of SumOfArraysMinusMeansMultiplied

// Code for computing the Correlation Coefficient 
double CorrelationCoefficient( matrix x, matrix y )  // input vectors.
{
     double cc, xMean, yMean;
     double xSigma, ySigma;

	 if (x.high() != y.high())
	 {
		 return NAN;
	 }

     xMean = ComputeMean( x.AsPointer(), x.high() );
     yMean = ComputeMean( y.AsPointer(), y.high() );

     xSigma = ComputeStdev( x.AsPointer(), x.high(), xMean );
     ySigma = ComputeStdev( y.AsPointer(), y.high(), yMean );

     cc = SumOfArraysMinusMeansMultiplied( x.AsPointer(), y.AsPointer(), y.high(), 
		                                   xMean, yMean ) / (double) (x.high()-1);

     return cc / ( xSigma * ySigma );

} // end of CorrelationCoefficient

// Function to computer coefficient of determination
double CoefficientOfDetermination( matrix y, matrix z )
{
    int k;
    double Mean, SumSquared, SquaredDiff;
    
    // Initialize Sum and SquaredDiff to first values.
	Mean = ComputeMean(y.AsPointer(), y.high()); 

    SquaredDiff = (y(0) - z(0)) * (y(0) - z(0));
	SumSquared  = (y(0) - Mean) * (y(0) - Mean);
	// Loop through the rest of the arrays.
    for( k = 1; k < y.high(); k++ )
    {
         SquaredDiff += (y(k) - z(k)) * (y(k) - z(k));
		 SumSquared  += (y(k) - Mean) * (y(k) - Mean);

    }// end of loop to compute Sum and SquaredDiff

    return (SumSquared-SquaredDiff) / SumSquared;
} // end of CoefficientOfDetermination
